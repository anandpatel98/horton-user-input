# to do for this module: the other unit tests must be written, along with testing horton to get the same number to a particular precision. check that the numbers match up. test files should be h2 rather than h2o to save time

import subprocess

# Checks that the default system for hartree fock is working, and that horton is initializing properly
def test_hf_plain():
    process= subprocess.Popen(['python', 'horton_initialization.py', 'test_hf_plain.txt'], stdout= subprocess.PIPE)
    output = process.communicate()[0]
    output_list = output.split()
    i = 0
    for entry in output_list:
        if output_list[i] == 'total':
            energy_hf = float(output_list[i+1])
        i += 1
    assert energy_hf == -75.585812494953

# Tests that the default system for dft is working properly, and that horton is initializing properly
def test_dft_plain():
    process= subprocess.Popen(['python', 'horton_initialization.py', 'test_dft_plain.txt'], stdout= subprocess.PIPE)
    output = process.communicate()[0]
    output_list = output.split()
    i = 0
    for entry in output_list:
        if output_list[i] == 'total':
            energy_dft = float(output_list[i+1])
        i += 1
    assert energy_dft == -75.971055999016

def test_atom_attributes():
    process= subprocess.Popen(['python', 'atom_attributes.py', 'test_attributes.txt', 'test'], stdout= subprocess.PIPE)
    output = process.communicate()[0]
    output_list = output.split()
    i = 0
    for entry in output_list:
        if entry == 'diatomic':
            diatomic = output_list[i+1]
        if output_list[i] == 'total_electrons':
            total_electrons = output_list[i+1]
        if output_list[i] == 'even_electrons':
            even_electrons = output_list[i+1]
        i = i+1
    assert diatomic
    assert total_electrons == '184'
    assert even_electrons

def test_input_conversion():
    process= subprocess.Popen(['python', 'input_conversion.py', 'test_conversion.txt', 'test'], stdout= subprocess.PIPE)
    output = process.communicate()[0]
    output_list = output.split()
    lib = False
    i = 0
    print output_list
    for entry in output_list:
        if output_list[i] == 'nalpha':
            nalpha = output_list[i+1]
        if output_list[i] == 'nbeta':
            nbeta = output_list[i+1]
        if output_list[i] == 'lib_initialized':
            lib = True
        i += 1
    assert nalpha == '5'
    assert nbeta == '5'
    assert lib


test_hf_plain()
test_dft_plain()
test_atom_attributes()
test_input_conversion()

