#!/usr/bin/env python

# This module takes a user input file and parses the keywords and their corresponding entries into a dictionary variable called user_input. Includes sanity checks to ensure the user doesn't enter invalid keywords. ***Note that only valid keywords are checked in this module, but the input is not checked.

import sys
import numpy as np

try:
    filename = sys.argv[1]
except:
    raise ValueError, "The input filename has not been specified or is not recognized. Please check the name of your input file and try again."

try:
    unit_test_check= sys.argv[2] == 'test'
except:
    unit_test_check = None # TODO shouldn't have pass here?

user_input= {}
atom_list=[]
coordinate_list=[]
line_count = 0
# Changed restriction keyword to type, but internally, it is still called restriction (since that can't be used as a variable name)
keywords= ["calculation", "scf", "correlation", "exchange", "functional", "grid", "basis", "verbosity", "charge", "coordinates", "restriction", "iterations", "energy", "gradient", "multiplicity", "integration"]

atoms = ['h', 'he', 'li', 'be', 'b', 'c', 'n', 'o', 'f', 'ne', 'na', 'mg', 'al', 'si', 'p', 's', 'cl', 'ar', 'k', 'ca', 'sc', 'ti', 'v', 'cr', 'mn', 'fe', 'co', 'ni', 'cu', 'zn', 'ga', 'ge', 'as', 'se', 'br', 'kr', 'rb', 'sr', 'y', 'zr', 'nb', 'mo', 'tc', 'ru', 'rh', 'pd', 'ag', 'cd', 'in', 'sn', 'sb', 'te', 'i', 'xe', 'cs', 'ba', 'la', 'ce', 'pr', 'nd', 'pm', 'sm', 'eu', 'gd', 'tb', 'dy', 'ho', 'er', 'tm', 'yb', 'lu', 'hf', 'ta', 'w', 're', 'os', 'ir', 'pt', 'au', 'hg', 'tl', 'pb', 'bi', 'po', 'at', 'rn', 'fr', 'ra', 'ac', 'th', 'pa', 'u', 'np', 'pu', 'am', 'cm', 'bk', 'cf', 'es', 'fm', 'md', 'no', 'lr', 'rf', 'db', 'sg', 'bh', 'hs', 'mt', 'ds', 'rg', 'cn', 'uut', 'fl', 'uup', 'lv', 'uus', 'uuo']


# Adds entries into a dictionary, with the keyword as a key. This loop does not take coordinates into the dictionary.
with open(filename) as handle:
    for line in handle:
	    line_count += 1
	    if line == '\n':
	        continue
	    tempinput = line.split()
	    key= str(tempinput[0]).lower()
	    value = ' '.join(tempinput[1:]).lower()
	    if key in user_input.keys(): # checks for repeated keywords (excluding coordinates)
	        raise KeyError, 'One or more of the keywords has been repeated on line %s' % (line_count) 
	    if not key in keywords:
	        raise KeyError, "The keyword on line %s is not recognized." % (line_count)
	    if "coordinates" in key:
	        break
	    if len(value) == 0:
	        raise KeyError, "The keyword on line %s does not have a corresponding value" % (line_count)
	    user_input[str(key)] = value
	# wipe leftover values in the variables before the next loop starts   
    key = None
    value = None
    
    
# Imports coordinates (includes check to make sure only the coordinates are last)
    for line in handle:
        line_count += 1
        if line == '\n':
	        continue
        tempinput = line.split()
        # Without the try/except, adding a space to a blank line doesn't register as \n and gives an error
        try:
            key= str(tempinput[0]).lower()
        except:
            raise SyntaxError, "The input file should not have blank lines after the coordinate matrix. Please check your input file and try again."
        value= tempinput [1:]
        if len(value) != 3:
	        raise KeyError, "Please check line %s of your input file. An error was found in the coordinate matrix." % (line_count)   
        if len(value) == 0:
	        raise KeyError, "The keyword on line %s does not have a corresponding value" % (line_count)
	# Error checking portion to ensure the coordinates are last, the coordinate keyword isn't repeated, and the user specifed real atoms 	
        if key in atoms:
	        atom_list.append(key)
	        coordinate_list.append(value)
        elif key == 'coordinates':
	        raise KeyError, 'The coordinate keyword has been repeated on line %s.' %(line_count)
        else:
            raise KeyError, "Please check line %s of your input file. An error was found in the coordinate matrix." % (line_count)
            #TODO change this errror message to something more appropriate
            
print user_input.keys()        
# Checks for essential keywords (e.g. calculation, coordinates, etc.)            
if 'calculation' not in user_input.keys():
    raise KeyError, 'The calculation keyword must be specified to run a calculation.'
    
# Ensures that only keywords appropriate to that calculation type are specified
if user_input["calculation"] == "hf":
    if "functional" in user_input or "exchange" in user_input or "correlation" in user_input:
        print "The functional, exchange or correlation keywords cannot be specified for hf calculations"
        exit()
	
# Adds a vector with atoms and a corresponding array with their coordinates to the dictionary
user_input["atom_array"] = np.array(atom_list)
user_input["coordinate_array"] = np.array(coordinate_list, dtype = float)









